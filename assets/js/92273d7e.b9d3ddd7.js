"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[514],{6986:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>n,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"middlewares/deadletter","title":"deadletter","description":"The deadletter middleware is used to send messages that have failed processing to a deadletter topic after a certain number of retries. This can be useful for identifying and debugging messages that are consistently causing processing errors.","source":"@site/docs/middlewares/deadletter.md","sourceDirName":"middlewares","slug":"/middlewares/deadletter","permalink":"/kp/docs/middlewares/deadletter","draft":false,"unlisted":false,"editUrl":"https://github.com/honestbank/kp/edit/main/docs/docs/middlewares/deadletter.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"retry","permalink":"/kp/docs/middlewares/retry"},"next":{"title":"graceful shutdown","permalink":"/kp/docs/middlewares/graceful-shutdown"}}');var d=r(4848),a=r(8453);const o={sidebar_position:9},n=void 0,i={},l=[];function c(e){const t={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.p,{children:"The deadletter middleware is used to send messages that have failed processing to a deadletter topic after a certain number of retries. This can be useful for identifying and debugging messages that are consistently causing processing errors."}),"\n",(0,d.jsx)(t.p,{children:"To use the deadletter middleware, you will need to provide a producer interface that can be used to send messages to the deadletter topic. You will also need to specify a threshold for the number of retries before a message is sent to the deadletter topic. Optionally, you can also provide a function that will be called whenever there is an error while producing a message to the deadletter topic."}),"\n",(0,d.jsx)(t.p,{children:"To use the deadletter middleware, you will need to provide a producer interface that can be used to send messages to the deadletter topic. You will also need to specify a threshold for the number of retries before a message is sent to the deadletter topic. Optionally, you can also provide a function that will be called whenever there is an error while producing a message to the deadletter topic."}),"\n",(0,d.jsx)(t.admonition,{type:"info",children:(0,d.jsx)(t.p,{children:"While you absolutely can use retries without deadletters, it'll probably be hard to setup re-processing of failed items. Using deadletters is highly recommended."})}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-go",children:"deadletterMiddleware := middlewares.NewDeadletterMiddleware(myProducer, 5, myOnProduceErrorsFunc)\nprocessor := kp.AddMiddleware(deadletterMiddleware)\n"})}),"\n",(0,d.jsx)(t.p,{children:"The deadletter middleware should be placed after the retry middleware in the middleware chain to ensure that messages are properly retried before being sent to the deadletter topic."}),"\n",(0,d.jsx)(t.admonition,{type:"warning",children:(0,d.jsx)(t.p,{children:"It is important to note that messages sent to the deadletter topic are not deleted from Kafka, so you will need to implement a separate process for cleaning up these messages to prevent them from accumulating over time."})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>n});var s=r(6540);const d={},a=s.createContext(d);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);