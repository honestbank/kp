"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[964],{8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var r=t(6540);const i={},o=r.createContext(i);function d(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(o.Provider,{value:n},e.children)}},8813:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"middlewares/introduction","title":"Introduction","description":"Middleware is a software pattern that allows you to intercept and modify the processing of messages in a chain. It is a powerful tool for customizing the behavior of a system and adding additional functionality, such as logging, retries, deadlettering, backoffs, and tracing.","source":"@site/docs/middlewares/introduction.md","sourceDirName":"middlewares","slug":"/middlewares/introduction","permalink":"/kp/docs/middlewares/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/honestbank/kp/edit/main/docs/docs/middlewares/introduction.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Consumer","permalink":"/kp/docs/features/consumer"},"next":{"title":"order-of-middleware","permalink":"/kp/docs/middlewares/order-of-middleware"}}');var i=t(4848),o=t(8453);const d={sidebar_position:1},a="Introduction",s={},l=[{value:"Adding Middleware to the KP Library",id:"adding-middleware-to-the-kp-library",level:2},{value:"Example",id:"example",level:2},{value:"Notes",id:"notes",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,i.jsx)(n.p,{children:"Middleware is a software pattern that allows you to intercept and modify the processing of messages in a chain. It is a powerful tool for customizing the behavior of a system and adding additional functionality, such as logging, retries, deadlettering, backoffs, and tracing."}),"\n",(0,i.jsx)(n.p,{children:"In the KP library, every feature is implemented as a middleware. This means that you can add or remove features by adding or removing middlewares from the middleware chain."}),"\n",(0,i.jsx)(n.h2,{id:"adding-middleware-to-the-kp-library",children:"Adding Middleware to the KP Library"}),"\n",(0,i.jsxs)(n.p,{children:["The KP library provides a way to add middlewares to the middleware chain through the ",(0,i.jsx)(n.code,{children:"AddMiddleware"})]}),"\n",(0,i.jsxs)(n.p,{children:["This method takes a middleware as an argument and returns a new MessageProcessor with the middleware added to the chain. Here is an example of how to use the ",(0,i.jsx)(n.code,{children:"AddMiddleware"})," method:"]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\t"fmt"\n\t"time"\n\n\tv2 "github.com/honestbank/kp/v2"\n\t"github.com/honestbank/kp/v2/middlewares/measurement"\n\t"github.com/honestbank/kp/v2/middlewares/tracing"\n\t"go.opentelemetry.io/otel"\n)\n\ntype UserLoggedInEvent struct {\n\tUserID string\n}\n\nfunc main() {\n\tretryCount := 10\n\tkp := v2.New[UserLoggedInEvent]("user-logged-in", getConfig()).\n\t\tWithRetryOrPanic("send-login-notification-retries", retryCount).\n\t\tWithDeadletterOrPanic("send-login-notification-failures")\n\tkp.AddMiddleware(measurement.NewMeasurementMiddleware("/path/to/push-gateway", "application-name"))\n\ttp := otel.GetTracerProvider() // you\'ll need to set the tracer provider as well\n\tkp.AddMiddleware(tracing.NewTracingMiddleware(tp))\n\terr := kp.Process(processUserLoggedInEvent)\n\tif err != nil {\n\t\tpanic(err) // do better error handling\n\t}\n}\n\nfunc processUserLoggedInEvent(ctx context.Context, message UserLoggedInEvent) error {\n\t// here, you can focus on your business logic.\n\tfmt.Printf("processing %v\\n", message)\n\ttime.Sleep(time.Millisecond * 200) // simulate long running process\n\treturn nil                         // or error\n}\n\nfunc getConfig() any {\n\treturn nil // return your config\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Middlewares are executed in the order they are added to the chain. It is important to consider the order in which middlewares are added."}),"\n",(0,i.jsx)(n.li,{children:"The KP library provides several built-in middlewares for common features, such as consuming messages, retries, deadletters, backoffs, and tracing. You can also write custom middlewares to meet your specific"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);