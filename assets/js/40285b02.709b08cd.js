"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[418],{4300:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Introduction","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Getting Started with KP","href":"/kp/docs/introduction/getting-started","docId":"introduction/getting-started","unlisted":false},{"type":"link","label":"Why use KP?","href":"/kp/docs/introduction/why-use-kp","docId":"introduction/why-use-kp","unlisted":false},{"type":"link","label":"Configuration Options","href":"/kp/docs/introduction/configuration","docId":"introduction/configuration","unlisted":false},{"type":"link","label":"Kafka Concepts","href":"/kp/docs/introduction/concepts","docId":"introduction/concepts","unlisted":false},{"type":"link","label":"Schema Registry","href":"/kp/docs/introduction/schema-registry","docId":"introduction/schema-registry","unlisted":false}],"href":"/kp/docs/category/introduction"},{"type":"category","label":"Core Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Producer","href":"/kp/docs/features/producer","docId":"features/producer","unlisted":false},{"type":"link","label":"Consumer","href":"/kp/docs/features/consumer","docId":"features/consumer","unlisted":false}],"href":"/kp/docs/category/core-features"},{"type":"category","label":"Middlewares","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/kp/docs/middlewares/introduction","docId":"middlewares/introduction","unlisted":false},{"type":"link","label":"order-of-middleware","href":"/kp/docs/middlewares/order-of-middleware","docId":"middlewares/order-of-middleware","unlisted":false},{"type":"link","label":"Consumer","href":"/kp/docs/middlewares/consumer","docId":"middlewares/consumer","unlisted":false},{"type":"link","label":"Backoff","href":"/kp/docs/middlewares/backoff","docId":"middlewares/backoff","unlisted":false},{"type":"link","label":"Metrics","href":"/kp/docs/middlewares/metrics","docId":"middlewares/metrics","unlisted":false},{"type":"link","label":"Tracing","href":"/kp/docs/middlewares/tracing","docId":"middlewares/tracing","unlisted":false},{"type":"link","label":"Retry Count","href":"/kp/docs/middlewares/retrycounter","docId":"middlewares/retrycounter","unlisted":false},{"type":"link","label":"retry","href":"/kp/docs/middlewares/retry","docId":"middlewares/retry","unlisted":false},{"type":"link","label":"deadletter","href":"/kp/docs/middlewares/deadletter","docId":"middlewares/deadletter","unlisted":false},{"type":"link","label":"graceful shutdown","href":"/kp/docs/middlewares/graceful-shutdown","docId":"middlewares/graceful-shutdown","unlisted":false},{"type":"link","label":"Write your own","href":"/kp/docs/middlewares/custom-middleware","docId":"middlewares/custom-middleware","unlisted":false}]},{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Produce Raw Message","href":"/kp/docs/examples/producer-raw","docId":"examples/producer-raw","unlisted":false},{"type":"link","label":"End to end setup","href":"/kp/docs/examples/end-to-end","docId":"examples/end-to-end","unlisted":false}],"href":"/kp/docs/category/examples"},{"type":"link","label":"Contributing","href":"/kp/docs/contributing/","docId":"contributing/contributing","unlisted":false},{"type":"link","label":"Migrating from v1","href":"/kp/docs/migration/","docId":"migration/migration","unlisted":false}]},"docs":{"contributing/contributing":{"id":"contributing/contributing","title":"Contributing","description":"To provide backwards compatibility guarantees, the core of the KP library should not change. This means that any changes to the core API or the behavior of the core should be avoided.","sidebar":"tutorialSidebar"},"examples/end-to-end":{"id":"examples/end-to-end","title":"End to end setup","description":"In this example, we\'re setting up an example project that:","sidebar":"tutorialSidebar"},"examples/producer-raw":{"id":"examples/producer-raw","title":"Produce Raw Message","description":"Producing a custom message without serialization","sidebar":"tutorialSidebar"},"features/consumer":{"id":"features/consumer","title":"Consumer","description":"The Consumer interface provides a way to retrieve and commit messages from a Kafka topic. It has two methods:","sidebar":"tutorialSidebar"},"features/producer":{"id":"features/producer","title":"Producer","description":"KP exposes a producer that can produce avro formatted messages, this ensures backwards compatibility through schema registry.","sidebar":"tutorialSidebar"},"introduction/concepts":{"id":"introduction/concepts","title":"Kafka Concepts","description":"A few of the Kafka concepts are abstracted away in this framework and this page attempts to clarify those concepts.","sidebar":"tutorialSidebar"},"introduction/configuration":{"id":"introduction/configuration","title":"Configuration Options","description":"KP can be configured using a config.KPConfig object.","sidebar":"tutorialSidebar"},"introduction/getting-started":{"id":"introduction/getting-started","title":"Getting Started with KP","description":"In this guide, we will walk through the steps to set up and use the KP library to process messages from a Kafka topic. We will start by installing the library and its dependencies, then we will write a custom processor function and add middlewares to customize the behavior of the message processing.","sidebar":"tutorialSidebar"},"introduction/schema-registry":{"id":"introduction/schema-registry","title":"Schema Registry","description":"Confluent Kafka comes with a schema registry, or you can choose to deploy this schema registry by yourself.","sidebar":"tutorialSidebar"},"introduction/why-use-kp":{"id":"introduction/why-use-kp","title":"Why use KP?","description":"Kafka is a message bus where a message is either committed or not, without committing a message, we can\'t process the next message.","sidebar":"tutorialSidebar"},"middlewares/backoff":{"id":"middlewares/backoff","title":"Backoff","description":"The backoff middleware slows down the processing of messages when errors occur. It uses a backoff policy to determine how long to wait between processing attempts.","sidebar":"tutorialSidebar"},"middlewares/consumer":{"id":"middlewares/consumer","title":"Consumer","description":"The consumer middleware is responsible for populating the chain with messages from the Kafka topic(s). Consumer middleware retrieves a message from the Kafka topic using the Consumer interface and passes it to the next middleware in the chain.","sidebar":"tutorialSidebar"},"middlewares/custom-middleware":{"id":"middlewares/custom-middleware","title":"Write your own","description":"Middlewares are a powerful way to customize the behavior of the library by intercepting and modifying the processing of messages. They are implemented as implementations of the KPMiddleware interface, which has a single method:","sidebar":"tutorialSidebar"},"middlewares/deadletter":{"id":"middlewares/deadletter","title":"deadletter","description":"The deadletter middleware is used to send messages that have failed processing to a deadletter topic after a certain number of retries. This can be useful for identifying and debugging messages that are consistently causing processing errors.","sidebar":"tutorialSidebar"},"middlewares/graceful-shutdown":{"id":"middlewares/graceful-shutdown","title":"graceful shutdown","description":"The gracefulshutdown middleware is designed to handle the syscall.SIGINT, syscall.SIGTERM, syscall.SIGHUP, and syscall.SIGQUIT signals gracefully, by allowing you to stop your processor in a controlled manner.","sidebar":"tutorialSidebar"},"middlewares/introduction":{"id":"middlewares/introduction","title":"Introduction","description":"Middleware is a software pattern that allows you to intercept and modify the processing of messages in a chain. It is a powerful tool for customizing the behavior of a system and adding additional functionality, such as logging, retries, deadlettering, backoffs, and tracing.","sidebar":"tutorialSidebar"},"middlewares/metrics":{"id":"middlewares/metrics","title":"Metrics","description":"The metrics middleware is a middleware for the KP library that tracks various metrics about the message processing, such as the duration of each operation and the number of successes and failures. These metrics are collected using the Prometheus library and can be pushed to a Prometheus gateway to be stored and visualized.","sidebar":"tutorialSidebar"},"middlewares/order-of-middleware":{"id":"middlewares/order-of-middleware","title":"order-of-middleware","description":"Order of Middleware Execution","sidebar":"tutorialSidebar"},"middlewares/retry":{"id":"middlewares/retry","title":"retry","description":"The retry middleware is a utility middleware that automatically retries processing a message in case of failure. When a message processing fails, the middleware produces the message to a retry topic. The middleware uses the Producer interface to produce the message, which means that the user can choose any Kafka client that implements this interface to produce the message.","sidebar":"tutorialSidebar"},"middlewares/retrycounter":{"id":"middlewares/retrycounter","title":"Retry Count","description":"The retry count middleware is a middleware for the KP library that adds the current retry count to the context of the message processing. The retry count is the number of times the message has been retried by the retry middleware.","sidebar":"tutorialSidebar"},"middlewares/tracing":{"id":"middlewares/tracing","title":"Tracing","description":"Tracing is a powerful tool that helps understand how a request flows through the system.","sidebar":"tutorialSidebar"},"migration/migration":{"id":"migration/migration","title":"Migration from v1","description":"Improper migration may cause your workload to re-consume messages from offset 0 - essentially re-processing all messages.","sidebar":"tutorialSidebar"}}}}')}}]);