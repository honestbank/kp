"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[980],{2272:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"examples/producer-raw","title":"Produce Raw Message","description":"Producing a custom message without serialization","source":"@site/docs/examples/producer-raw.md","sourceDirName":"examples","slug":"/examples/producer-raw","permalink":"/kp/docs/examples/producer-raw","draft":false,"unlisted":false,"editUrl":"https://github.com/honestbank/kp/edit/main/docs/docs/examples/producer-raw.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Examples","permalink":"/kp/docs/category/examples"},"next":{"title":"End to end setup","permalink":"/kp/docs/examples/end-to-end"}}');var r=t(4848),a=t(8453);const i={sidebar_position:1},s="Produce Raw Message",c={},d=[{value:"Configuration",id:"configuration",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"produce-raw-message",children:"Produce Raw Message"})}),"\n",(0,r.jsx)(n.p,{children:"Producing a custom message without serialization"}),"\n",(0,r.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Please check ",(0,r.jsx)(n.a,{href:"/kp/docs/introduction/configuration",children:"this page"})," for detailed configuration option"]})}),"\n",(0,r.jsx)(n.p,{children:"The following example sends a message to a Kafka topic. This gives you full ability to fully customize the way you want to produce a message."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"github.com/confluentinc/confluent-kafka-go/kafka"\n\t"github.com/honestbank/kp/v2/producer"\n)\n\ntype UserLoggedIn struct {\n\tUserID string `avro:"user_id"`\n}\n\nfunc main() {\n\tp, err := producer.New[UserLoggedIn]("topic-name", getConfig()) // this will still publish and check against schema registry.\n\tdefer p.Flush()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = p.ProduceRaw(*kafka.Message{}) // producing raw will ignore the schema and won\'t be validated.\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc getConfig() any {\n\treturn nil // return your config\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(6540);const r={},a=o.createContext(r);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);