"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[81],{1210:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"introduction/why-use-kp","title":"Why use KP?","description":"Kafka is a message bus where a message is either committed or not, without committing a message, we can\'t process the next message.","source":"@site/docs/introduction/why-use-kp.md","sourceDirName":"introduction","slug":"/introduction/why-use-kp","permalink":"/kp/docs/introduction/why-use-kp","draft":false,"unlisted":false,"editUrl":"https://github.com/honestbank/kp/edit/main/docs/docs/introduction/why-use-kp.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started with KP","permalink":"/kp/docs/introduction/getting-started"},"next":{"title":"Configuration Options","permalink":"/kp/docs/introduction/configuration"}}');var o=n(4848),r=n(8453);const a={sidebar_position:1},s="Why use KP?",c={},d=[];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"why-use-kp",children:"Why use KP?"})}),"\n",(0,o.jsx)(t.p,{children:"Kafka is a message bus where a message is either committed or not, without committing a message, we can't process the next message."}),"\n",(0,o.jsx)(t.p,{children:"Implementing retries, backoffs and tracing becomes a little difficult as they all pollute your business code."}),"\n",(0,o.jsx)(t.p,{children:"KP provides everything out of the box. With one line each, you can configure backoffs, retries, deadletters, tracing, measurements etc. It makes it in a way that your business logic is a simple user-defined-function free of all the other logic which isn't the core of the business."}),"\n",(0,o.jsx)(t.p,{children:"Take the following example:"}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["Please check ",(0,o.jsx)(t.a,{href:"/kp/docs/introduction/configuration",children:"this page"})," for detailed configuration option"]})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\t"github.com/confluentinc/confluent-kafka-go/kafka"\n\t"github.com/honestbank/kp/v2/middlewares/consumer"\n\t"github.com/honestbank/kp/v2/middlewares/deadletter"\n\t"github.com/honestbank/kp/v2/middlewares/retry"\n\t"time"\n\n\tbackoff_policy "github.com/honestbank/backoff-policy"\n\tv2 "github.com/honestbank/kp/v2"\n\t"github.com/honestbank/kp/v2/middlewares/backoff"\n\t"github.com/honestbank/kp/v2/middlewares/measurement"\n\t"github.com/honestbank/kp/v2/middlewares/retry_count"\n\t"github.com/honestbank/kp/v2/middlewares/tracing"\n\t"go.opentelemetry.io/otel"\n)\n\ntype UserLoggedInEvent struct {\n\tUserID string\n}\n\nfunc main() {\n\tinitializeTracer()\n\tretryCount := 10\n\tapplicationName := "send-login-notification-worker"\n\tkp := v2.New[kafka.Message]()\n\tkp.\n\t\tAddMiddleware(consumer.NewConsumerMiddleware(getConsumer())).\n\t\tAddMiddleware(deadletter.NewDeadletterMiddleware(getDeadletterProducer(), 10, func(err error) {})).\n\t\tAddMiddleware(retry.NewRetryMiddleware(getRetryMiddleware(), func(err error) {})).\n\t\tAddMiddleware(backoff.NewBackoffMiddleware(backoff_policy.NewExponentialBackoffPolicy(time.Millisecond*200, 10))). // 1 line to enable backoffs\n\t\tAddMiddleware(tracing.NewTracingMiddleware(otel.GetTracerProvider())). // 1 line to enable tracing\n\t\tAddMiddleware(measurement.NewMeasurementMiddleware("path/to/prometheus-push-gateway", applicationName)). // 1 line to enable measurements\n\t\tAddMiddleware(retry_count.NewRetryCountMiddleware())\n\tkp.Process(func(ctx context.Context, message *kafka.Message) error {\n\t\t// process the message and return error if it fails. don\'t worry about retries here.\n\t\t// but if you need to know the current count use the following:\n\t\tcount := retry_count.FromContext(ctx)\n\t\tprint(count)\n\t\treturn nil\n\t})\n}\n\nfunc getConfig() any {\n\treturn nil // return your config\n}\n\nfunc initializeTracer() {\n\t// initialize your tracer\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"In the above example, we added retries, deadletters, backoffs, tracing and measurements all taking 1 line each."}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsx)(t.p,{children:"It is also possible to write your own middleware if KP doesn't cover usecase. And it's very simple to do so. Checkout writing middlewares page to learn how."})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var i=n(6540);const o={},r=i.createContext(o);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);