"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[324],{3772:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"features/consumer","title":"Consumer","description":"The Consumer interface provides a way to retrieve and commit messages from a Kafka topic. It has two methods:","source":"@site/docs/features/consumer.md","sourceDirName":"features","slug":"/features/consumer","permalink":"/kp/docs/features/consumer","draft":false,"unlisted":false,"editUrl":"https://github.com/honestbank/kp/edit/main/docs/docs/features/consumer.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Producer","permalink":"/kp/docs/features/producer"},"next":{"title":"Introduction","permalink":"/kp/docs/middlewares/introduction"}}');var o=n(4848),r=n(8453);const i={sidebar_position:2},a="Consumer",c={},l=[{value:"Example",id:"example",level:3},{value:"Default Configuration Values",id:"default_values",level:3},{value:"Notes",id:"notes",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"consumer",children:"Consumer"})}),"\n",(0,o.jsx)(t.p,{children:"The Consumer interface provides a way to retrieve and commit messages from a Kafka topic. It has two methods:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"GetMessage() *kafka.Message"}),": This method retrieves a message from the Kafka topic. It returns a pointer to a kafka.Message struct, which contains the message value, key, and other metadata."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"Commit(message *kafka.Message) error"}),": This method commits a message to the Kafka topic. It takes a pointer to a kafka.Message struct as an argument, and returns an error if the commit fails."]}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsx)(t.p,{children:"While it is possible to use the Consumer interface directly, it is intended to be used through the consumer middleware"})}),"\n",(0,o.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.p,{children:"Here is an example of how to use the Consumer interface to retrieve and commit messages from a Kafka topic:"}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["Please check ",(0,o.jsx)(t.a,{href:"/kp/docs/introduction/configuration",children:"configuration page"})," for detailed configuration option"]})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"github.com/honestbank/kp/v2/consumer"\n)\n\nfunc main() {\n\tc, err := consumer.New([]string{"topic-1", "topic-2"}, getConfig())\n\tif err != nil {\n\t\t// handle err\n    }\n\tmsg := c.GetMessage()\n\tif msg == nil {\n\t\t// handle error or no message available\n\t}\n\n\t// Process the message\n\t// ...\n\n\t// Commit the message to the Kafka topic\n\tif err := c.Commit(msg); err != nil {\n\t\t// handle error\n\t}\n}\n\nfunc getConfig() any {\n\treturn nil // return your config\n}\n'})}),"\n",(0,o.jsx)(t.h3,{id:"default_values",children:"Default Configuration Values"}),"\n",(0,o.jsxs)(t.p,{children:["The consumer sets these default when calling ",(0,o.jsx)(t.code,{children:"func (c config.Kafka) WithDefaults()"})," method"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"ConsumerSessionTimeoutMs"})," is set to 30s. Setting this value too low can cause false re-balance and setting it too high will add delays between deployments."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"ConsumerAutoOffsetReset"})," is set to earliest. This means the first deployment of the consumer, it'll start consuming messages from the beginning of the topic (or from start). If this value is set to ",(0,o.jsx)(t.code,{children:"latest"}),", it'll only consume messages that were produced after this consumer is deployed."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"ClientID"})," is set to ",(0,o.jsx)(t.code,{children:"rdkafka"})," this value is used to debug issues and generally left to the default."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"notes",children:"Notes"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["If the ",(0,o.jsx)(t.code,{children:"GetMessage()"})," method returns nil, it could mean that there are no messages available or that an error occurred, generally errors are recovered internally by confluent client."]}),"\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.code,{children:"Commit()"})," method should only be called after you have successfully processed the message and are ready to commit it to the Kafka topic."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);