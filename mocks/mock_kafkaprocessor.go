// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/honestbank/kp (interfaces: KafkaProcessor)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sarama "github.com/Shopify/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockKafkaProcessor is a mock of KafkaProcessor interface.
type MockKafkaProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaProcessorMockRecorder
}

// MockKafkaProcessorMockRecorder is the mock recorder for MockKafkaProcessor.
type MockKafkaProcessorMockRecorder struct {
	mock *MockKafkaProcessor
}

// NewMockKafkaProcessor creates a new mock instance.
func NewMockKafkaProcessor(ctrl *gomock.Controller) *MockKafkaProcessor {
	mock := &MockKafkaProcessor{ctrl: ctrl}
	mock.recorder = &MockKafkaProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaProcessor) EXPECT() *MockKafkaProcessorMockRecorder {
	return m.recorder
}

// OnFailure mocks base method.
func (m *MockKafkaProcessor) OnFailure(arg0 func(context.Context, string, string, int, *sarama.ConsumerMessage) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnFailure", arg0)
}

// OnFailure indicates an expected call of OnFailure.
func (mr *MockKafkaProcessorMockRecorder) OnFailure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFailure", reflect.TypeOf((*MockKafkaProcessor)(nil).OnFailure), arg0)
}

// Process mocks base method.
func (m *MockKafkaProcessor) Process(arg0 func(context.Context, string, string, int, *sarama.ConsumerMessage) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Process", arg0)
}

// Process indicates an expected call of Process.
func (mr *MockKafkaProcessorMockRecorder) Process(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockKafkaProcessor)(nil).Process), arg0)
}

// Start mocks base method.
func (m *MockKafkaProcessor) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockKafkaProcessorMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockKafkaProcessor)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockKafkaProcessor) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockKafkaProcessorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockKafkaProcessor)(nil).Stop))
}
