// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/honestbank/kp (interfaces: KPConsumer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sarama "github.com/Shopify/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockKPConsumer is a mock of KPConsumer interface.
type MockKPConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockKPConsumerMockRecorder
}

// MockKPConsumerMockRecorder is the mock recorder for MockKPConsumer.
type MockKPConsumerMockRecorder struct {
	mock *MockKPConsumer
}

// NewMockKPConsumer creates a new mock instance.
func NewMockKPConsumer(ctrl *gomock.Controller) *MockKPConsumer {
	mock := &MockKPConsumer{ctrl: ctrl}
	mock.recorder = &MockKPConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKPConsumer) EXPECT() *MockKPConsumerMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockKPConsumer) Cleanup(arg0 sarama.ConsumerGroupSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockKPConsumerMockRecorder) Cleanup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockKPConsumer)(nil).Cleanup), arg0)
}

// ConsumeClaim mocks base method.
func (m *MockKPConsumer) ConsumeClaim(arg0 sarama.ConsumerGroupSession, arg1 sarama.ConsumerGroupClaim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeClaim", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeClaim indicates an expected call of ConsumeClaim.
func (mr *MockKPConsumerMockRecorder) ConsumeClaim(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeClaim", reflect.TypeOf((*MockKPConsumer)(nil).ConsumeClaim), arg0, arg1)
}

// GetReady mocks base method.
func (m *MockKPConsumer) GetReady() chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReady")
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// GetReady indicates an expected call of GetReady.
func (mr *MockKPConsumerMockRecorder) GetReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReady", reflect.TypeOf((*MockKPConsumer)(nil).GetReady))
}

// Process mocks base method.
func (m *MockKPConsumer) Process(arg0 context.Context, arg1 *sarama.ConsumerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockKPConsumerMockRecorder) Process(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockKPConsumer)(nil).Process), arg0, arg1)
}

// SetReady mocks base method.
func (m *MockKPConsumer) SetReady(arg0 chan bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReady", arg0)
}

// SetReady indicates an expected call of SetReady.
func (mr *MockKPConsumerMockRecorder) SetReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReady", reflect.TypeOf((*MockKPConsumer)(nil).SetReady), arg0)
}

// Setup mocks base method.
func (m *MockKPConsumer) Setup(arg0 sarama.ConsumerGroupSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockKPConsumerMockRecorder) Setup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockKPConsumer)(nil).Setup), arg0)
}
